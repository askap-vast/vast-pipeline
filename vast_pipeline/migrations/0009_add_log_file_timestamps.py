# Generated by Django 3.2.9 on 2022-01-14 13:30

# This is a migration to rename the log files of old runs prior to when
# they were timestamped. No DB changes occur in this migration.

import shutil
import warnings

from django.db import migrations
from pathlib import Path


def get_timestamp(log_path: Path) -> str:
    """
    Opens the provided log file and extracts the timestamp from the
    first line.

    Args:
        log_path: The Path object for the log file.

    Returns:
        The string representation of the timestamp in the format of
        YYYY-MM-DD-HH-MM-SS.
    """
    with log_path.open() as f:
        line = f.readlines()[0]

    timestamp = (
        line.split(',')[0]
        .replace(' ', '-')
        .replace(':', '-')
    )

    return timestamp


def add_timestamp_and_copy(log_path: Path) -> None:
    """
    Creates a new log file with the timestamp added to the name.

    Args:
        log_path: The Path object for the log file.

    Returns:
        None
    """
    timestamp = get_timestamp(log_path)

    new_log_name = f"{timestamp}_{log_path.name}"
    new_log_path = log_path.parent / new_log_name

    # check if already exists, pretty much impossible
    if new_log_path.exists():
        warnings.warn(
            f"Log file '{log_path}' not migrated as log file with timestamp"
            f" '{new_log_name}' already exists!"
        )
        return

    else:
        try:
            shutil.copy(log_path, new_log_path)
        except Exception as e:
            warnings.warn(
                f"Log file '{log_path}' could not be migrated as the copy"
                " operation failed. Please migrate this log file manually."
                f"Copy error: {e}."
            )
            return

        # a final check before deletion.
        if new_log_path.exists():
            log_path.unlink()
        else:
            warnings.warn(
                "While the copy operation was apparently successful the"
                f" new log file '{new_log_path}' does not exist. Please"
                " migrate the old log file '{log_path}' manually."
            )


def rename_logs(apps, schema_editor) -> None:
    """
    Loops through the existing runs and adds timestamps to the log files
    where required.
    """
    Run = apps.get_model('vast_pipeline', 'Run')

    # old names of logs before timestamping was introduced.
    logs_to_check = ['log.txt', 'restore_log.txt', 'gen_arrow_log.txt']

    for run in Run.objects.all():
        run_path = Path(run.path)
        for log in logs_to_check:
            log_path = run_path / log
            if log_path.exists():
                add_timestamp_and_copy(log_path)
            else:
                continue


class Migration(migrations.Migration):

    dependencies = [
        ('vast_pipeline', '0008_delete_measurementpair'),
    ]

    operations = [
        migrations.RunPython(rename_logs),
    ]
