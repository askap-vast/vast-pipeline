import os
import logging
import pandas as pd
import dask.array as da
import dask.bag as db
import dask.dataframe as dd

from typing import List
from astropy import units as u
from astropy.coordinates import SkyCoord

from vast_pipeline.models import Association, RelatedSource, Run
from vast_pipeline.utils.utils import StopWatch

from .loading import (
    upload_associations, upload_sources, upload_related_sources
)
from .utils import get_source_models, parallel_groupby


logger = logging.getLogger(__name__)


def final_operations(
    sources_df: dd.DataFrame, first_img: str, p_run: Run, meas_dj_obj: List,
    new_sources_df: dd.DataFrame) -> int:
    timer = StopWatch()

    # calculate source fields
    logger.info(
        'Calculating statistics for sources...'
        # 'Calculating statistics for %i sources...',
        # sources_df.source.unique().shape[0]
    )

    timer.reset()
    srcs_df = parallel_groupby(sources_df)
    # logger.info('Groupby-apply time: %.2f seconds', timer.reset())
    # fill NaNs as resulted from calculated metrics with 0
    srcs_df = srcs_df.fillna(0.)

    # add new sources
    srcs_df['new'] = srcs_df.index.isin(
        new_sources_df.index.values.compute()
    )

    srcs_df = srcs_df.merge(
        new_sources_df[['new_high_sigma']],
        left_index=True, right_index=True, how='left'
    )

    srcs_df['new_high_sigma'] = srcs_df['new_high_sigma'].fillna(0.)

    # calculate nearest neighbour
    ra, dec = dd.compute(srcs_df['wavg_ra'], srcs_df['wavg_dec'])
    srcs_skycoord = SkyCoord(ra, dec, unit=(u.deg, u.deg))
    del ra, dec

    idx, d2d, _ = srcs_skycoord.match_to_catalog_sky(
        srcs_skycoord,
        nthneighbor=2
    )
    # Dask doen't like assignment of a column from an array, need to be
    # a Dask array with partitions, chuncks in this case
    # TODO: checks if using shape will be faster than len (FYI each partition is
    # a pandas dataframe)
    arr_chuncks = tuple(srcs_df.map_partitions(len).compute())
    srcs_df['n_neighbour_dist'] = da.from_array(d2d.deg, chunks=arr_chuncks)
    del arr_chuncks, idx, d2d, srcs_skycoord

    # generate the source models
    srcs_df['src_dj'] = srcs_df.apply(
        get_source_models,
        pipeline_run=p_run,
        axis=1,
        meta=object
    )
    import ipdb; ipdb.set_trace()  # breakpoint 0eaeae7c //
    # upload sources and related to DB
    upload_sources(p_run, srcs_df)

    # get db ids for sources
    srcs_df['id'] = srcs_df['src_dj'].apply(lambda x: x.id, meta=int)

    import ipdb; ipdb.set_trace()  # breakpoint bcf8f142 //
    # gather the related df, upload to db and save to parquet file
    # the df will look like
    #
    #         from_source_id  to_source_id
    # source
    # 714     60              14396
    # 1211    94              12961
    #
    # the index ('source') has the initial id generated by the pipeline to
    # identify unique sources, the 'from_source_id' column has the django
    # model id (in db), the 'to_source_id' has the pipeline index
    related_df = (
        srcs_df.loc[srcs_df['related_list'] != -1, ['id', 'related_list']]
        .explode('related_list')
        .rename(
            columns={'id': 'from_source_id', 'related_list': 'to_source_id'}
        )
    )
    # for the column 'from_source_id', replace relation source ids with db id
    related_df['to_source_id'] = related_df['to_source_id'].map(
        srcs_df['id'].to_dict()
    )
    # drop relationships with the same source
    related_df = related_df[
        related_df['from_source_id'] != related_df['to_source_id']
    ]
    # write symmetrical relations to parquet
    related_df.to_parquet(
        os.path.join(p_run.path, 'relations.parquet'),
        index=False
    )
    # create related models and write them to db
    related_df['rel_src_dj'] = related_df.apply(
        lambda row: RelatedSource(**row.to_dict()), axis=1
    )
    upload_related_sources(related_df['rel_src_dj'])
    del related_df


    # write sources to parquet file
    srcs_df = srcs_df.drop(['related_list', 'img_list'], axis=1)
    (
        srcs_df.drop('src_dj', axis=1)
        .set_index('id')# set the index to db ids, dropping the source idx
        .to_parquet(os.path.join(p_run.path, 'sources.parquet'))
    )

    # calculate total number of extracted sources
    nr_sources = srcs_df['id'].count()

    # update measurments with sources to get associations
    sources_df = (
        sources_df.drop('related', axis=1)
        .merge(srcs_df.rename(columns={'id': 'source_id'}), on='source')
        .merge(meas_dj_obj, on='id')
    )

    # Create Associan objects (linking measurements into single sources)
    # and insert in DB
    sources_df['assoc_dj'] = sources_df.apply(
        lambda row: Association(
            meas=row['meas_dj'],
            source=row['src_dj'],
            d2d=row['d2d'],
            dr=row['dr'],
        ), axis=1
    )
    # upload associations in DB
    upload_associations(sources_df['assoc_dj'])

    # write associations to parquet file
    sources_df.rename(columns={'id': 'meas_id'})[
        ['source_id', 'meas_id', 'd2d', 'dr']
    ].to_parquet(os.path.join(p_run.path, 'associations.parquet'))

    logger.info(
        'Total final operations time: %.2f seconds', timer.reset_init()
    )

    return nr_sources
